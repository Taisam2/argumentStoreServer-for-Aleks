# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.approval import Approval  # noqa: F401,E501
from swagger_server.models.links import Links  # noqa: F401,E501
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class Argument(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _datetime: datetime=None, text: str=None, author: User=None, approval: List[Approval]=None, links: List[Links]=None):  # noqa: E501
        """Argument - a model defined in Swagger

        :param _datetime: The _datetime of this Argument.  # noqa: E501
        :type _datetime: datetime
        :param text: The text of this Argument.  # noqa: E501
        :type text: str
        :param author: The author of this Argument.  # noqa: E501
        :type author: User
        :param approval: The approval of this Argument.  # noqa: E501
        :type approval: List[Approval]
        :param links: The links of this Argument.  # noqa: E501
        :type links: List[Links]
        """
        self.swagger_types = {
            '_datetime': datetime,
            'text': str,
            'author': User,
            'approval': List[Approval],
            'links': List[Links]
        }

        self.attribute_map = {
            '_datetime': 'datetime',
            'text': 'text',
            'author': 'author',
            'approval': 'approval',
            'links': 'links'
        }
        self.__datetime = _datetime
        self._text = text
        self._author = author
        self._approval = approval
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'Argument':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Argument of this Argument.  # noqa: E501
        :rtype: Argument
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _datetime(self) -> datetime:
        """Gets the _datetime of this Argument.


        :return: The _datetime of this Argument.
        :rtype: datetime
        """
        return self.__datetime

    @_datetime.setter
    def _datetime(self, _datetime: datetime):
        """Sets the _datetime of this Argument.


        :param _datetime: The _datetime of this Argument.
        :type _datetime: datetime
        """
        if _datetime is None:
            raise ValueError("Invalid value for `_datetime`, must not be `None`")  # noqa: E501

        self.__datetime = _datetime

    @property
    def text(self) -> str:
        """Gets the text of this Argument.


        :return: The text of this Argument.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this Argument.


        :param text: The text of this Argument.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def author(self) -> User:
        """Gets the author of this Argument.


        :return: The author of this Argument.
        :rtype: User
        """
        return self._author

    @author.setter
    def author(self, author: User):
        """Sets the author of this Argument.


        :param author: The author of this Argument.
        :type author: User
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def approval(self) -> List[Approval]:
        """Gets the approval of this Argument.


        :return: The approval of this Argument.
        :rtype: List[Approval]
        """
        return self._approval

    @approval.setter
    def approval(self, approval: List[Approval]):
        """Sets the approval of this Argument.


        :param approval: The approval of this Argument.
        :type approval: List[Approval]
        """
        if approval is None:
            raise ValueError("Invalid value for `approval`, must not be `None`")  # noqa: E501

        self._approval = approval

    @property
    def links(self) -> List[Links]:
        """Gets the links of this Argument.


        :return: The links of this Argument.
        :rtype: List[Links]
        """
        return self._links

    @links.setter
    def links(self, links: List[Links]):
        """Sets the links of this Argument.


        :param links: The links of this Argument.
        :type links: List[Links]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links
